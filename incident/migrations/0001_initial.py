# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-05-17 14:45
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0033_remove_golive_expiry_help_text'),
        ('common', '0001_initial'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailimages', '0019_delete_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='CurrentChargesTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DroppedChargesTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentBroken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1)),
                ('equipment', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='incident.Equipment', verbose_name='Equipment Broken')),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentSeized',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1)),
                ('equipment', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='incident.Equipment', verbose_name='Equipment Seized')),
            ],
        ),
        migrations.CreateModel(
            name='IncidentCategorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('category', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='common.CategoryPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='IncidentIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='IncidentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateTimeField()),
                ('affiliation', models.CharField(blank=True, default='Independent', max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, help_text='Two character state abbreviation', max_length=2, null=True)),
                ('body', wagtail.wagtailcore.fields.StreamField((('rich_text', wagtail.wagtailcore.blocks.RichTextBlock(icon='doc-full', label='Rich Text')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('raw_html', wagtail.wagtailcore.blocks.RawHTMLBlock())))),
                ('arrest_status', models.CharField(blank=True, choices=[('UNKNOWN', 'unknown'), ('DETAINED_NO_PROCESSING', 'detained and released without being processed'), ('DETAINED_CUSTODY', 'detained and still in custody'), ('ARRESTED_CUSTODY', 'arrested and still in custody'), ('ARRESTED_RELEASED', 'arrested and released')], max_length=255, null=True)),
                ('status_of_charges', models.CharField(blank=True, choices=[('UNKNOWN', 'unknown'), ('NOT_CHARGED', 'not charged'), ('CHARGES_PENDING', 'charges pending'), ('CHARGES_DROPPED', 'charges dropped'), ('CONVICTED', 'convicted'), ('ACQUITTED', 'acquitted'), ('PENDING_APPEAL', 'pending appeal')], max_length=255, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('detention_date', models.DateTimeField(blank=True, help_text='This field will default to the date field if not specified.', null=True)),
                ('unnecessary_use_of_force', models.BooleanField(default=False)),
                ('lawsuit_name', models.CharField(blank=True, max_length=1024, null=True)),
                ('jurisdiction', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Jurisdiction')),
                ('status_of_seized_equipment', models.CharField(blank=True, choices=[('UNKNOWN', 'unknown'), ('CUSTODY', 'in custody'), ('RETURNED_FULL', 'returned in full'), ('RETURNED_PART', 'returned in part')], max_length=255, null=True)),
                ('is_search_warrant_obtained', models.BooleanField(default=False)),
                ('actor', models.CharField(blank=True, choices=[('UNKNOWN', 'unknown'), ('LAW_ENFORCEMENT', 'law enforcement'), ('PRIVATE_SECURITY', 'private security'), ('POLITICIAN', 'politician'), ('PUBLIC_FIGURE', 'public figure'), ('PRIVATE_INDIVIDUAL', 'private individual')], max_length=255, null=True)),
                ('border_point', models.CharField(blank=True, max_length=500, null=True)),
                ('stopped_at_border', models.BooleanField(default=False)),
                ('target_us_citizenship_status', models.CharField(blank=True, choices=[('US_CITIZEN', 'U.S. citizen'), ('PERMANENT_RESIDENT', 'U.S. permanent resident (green card)'), ('NON_RESIDENT', 'U.S. non-resident')], max_length=255, null=True)),
                ('denial_of_entry', models.BooleanField(default=False)),
                ('stopped_previously', models.BooleanField(default=False)),
                ('did_authorities_ask_for_device_access', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True)),
                ('did_authorities_ask_for_social_media_user', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True)),
                ('did_authorities_ask_for_social_media_pass', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True)),
                ('did_authorities_ask_about_work', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True, verbose_name="Did authorities ask intrusive questions about journalist's work?")),
                ('were_devices_searched_or_seized', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True)),
                ('assailant', models.CharField(blank=True, choices=[('UNKNOWN', 'unknown'), ('LAW_ENFORCEMENT', 'law enforcement'), ('PRIVATE_SECURITY', 'private security'), ('POLITICIAN', 'politician'), ('PUBLIC_FIGURE', 'public figure'), ('PRIVATE_INDIVIDUAL', 'private individual')], max_length=255, null=True)),
                ('was_journalist_targeted', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True)),
                ('charged_under_espionage_act', models.BooleanField(default=False)),
                ('subpoena_type', models.CharField(blank=True, choices=[('TESTIMONY_ABOUT_SOURCE', 'testimony about confidential source'), ('OTHER_TESTIMONY', 'other testimony'), ('JOURNALIST_COMMUNICATIONS', 'journalist communications or work product')], max_length=255, null=True)),
                ('subpoena_status', models.CharField(blank=True, choices=[('PENDING', 'pending'), ('DROPPED', 'dropped'), ('QUASHED', 'quashed'), ('UPHELD', 'upheld'), ('CARRIED_OUT', 'carried out')], max_length=255, null=True)),
                ('held_in_contempt', models.CharField(blank=True, choices=[('NOTHING', 'unknown'), ('JUST_TRUE', 'yes'), ('JUST_FALSE', 'no')], max_length=255, null=True, verbose_name='If subject refused to cooperate, were they held in contempt?')),
                ('detention_status', models.CharField(blank=True, choices=[('HELD_IN_CONTEMPT_NO_JAIL', 'held in contempt but not jailed'), ('IN_JAIL', 'in jail'), ('RELEASED', 'released from jail')], max_length=255, null=True)),
                ('third_party_in_possession_of_communications', models.CharField(blank=True, max_length=512, null=True)),
                ('third_party_business', models.CharField(blank=True, choices=[('TELECOM', 'telecom company'), ('TECH_COMPANY', 'tech company'), ('ISP', 'internet service provider'), ('FINANCIAL', 'bank/financial institution'), ('TRAVEL', 'travel company'), ('OTHER', 'other')], max_length=255, null=True)),
                ('legal_order_type', models.CharField(blank=True, choices=[('SUBPOENA', 'subpoena'), ('2703', '2703(d) court order'), ('WARRANT', 'warrant'), ('NATIONAL_SECURITY_LETTER', 'national security letter'), ('FISA', 'FISA order'), ('OTHER', 'other')], max_length=255, null=True)),
                ('status_of_prior_restraint', models.CharField(blank=True, choices=[('PENDING', 'pending'), ('DROPPED', 'dropped'), ('STRUCK_DOWN', 'struck down'), ('UPHELD', 'upheld')], max_length=255, null=True)),
                ('current_charges', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.CurrentChargesTag', to='taggit.Tag', verbose_name='Current Changes')),
                ('dropped_charges', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.DroppedChargesTag', to='taggit.Tag', verbose_name='Dropped Changes')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='IncidentPageUpdates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=255)),
                ('date', models.DateTimeField()),
                ('body', wagtail.wagtailcore.fields.StreamField((('rich_text', wagtail.wagtailcore.blocks.RichTextBlock(icon='doc-full', label='Rich Text')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('raw_html', wagtail.wagtailcore.blocks.RawHTMLBlock())))),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='incident.IncidentPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='NationalityTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_nationalities', to='incident.IncidentPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_nationalitytag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PoliticiansOrPublicTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_politicians_or_public', to='incident.IncidentPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_politiciansorpublictag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TargetsCommunicationsObtainedTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_targets_communications_obtained', to='incident.IncidentPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_targetscommunicationsobtainedtag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TargetsTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_targets', to='incident.IncidentPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_targetstag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='politicians_or_public_figures_involved',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.PoliticiansOrPublicTag', to='taggit.Tag', verbose_name='Politicians or public officials involved'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='related_incidents',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, related_name='_incidentpage_related_incidents_+', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='common.Tag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='target_nationality',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.NationalityTag', to='taggit.Tag', verbose_name='Target Nationality'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='targets',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.TargetsTag', to='taggit.Tag', verbose_name='Targets (Journalists/Organizations)'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='targets_whose_communications_were_obtained',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='incident.TargetsCommunicationsObtainedTag', to='taggit.Tag', verbose_name='Journalists/Organizations whose communications were obtained in leak investigation'),
        ),
        migrations.AddField(
            model_name='incidentpage',
            name='teaser_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='incidentcategorization',
            name='incident_page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='equipmentseized',
            name='incident',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_seized', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='equipmentbroken',
            name='incident',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_broken', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='droppedchargestag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_dropped_charges', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='droppedchargestag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_droppedchargestag_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='currentchargestag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_current_charges', to='incident.IncidentPage'),
        ),
        migrations.AddField(
            model_name='currentchargestag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_currentchargestag_items', to='taggit.Tag'),
        ),
    ]
