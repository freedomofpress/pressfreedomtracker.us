---
- hosts: localhost
  connection: local
  become: no
  vars:
    molecule_scenario_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}"
    node_tag: 6.11.0-alpine
    root_dir: "{{ molecule_scenario_directory }}/../../"
  tasks:
    # Trying to avoid `find` b/c not certain about OSX compatibility
    - name: Check for root owned files
      command: find ./ -user root
      args:
        chdir: "{{ root_dir }}"
      ignore_errors: true
      changed_when: false
      register: root_check_result

    - fail:
        msg: |
          Please chown root owned files to continue.
          `make dev-chownroot`
      when: root_check_result.stdout_lines

    - name: Get hashes from our requirements file
      stat:
        path: "../../requirements.txt"
        get_md5: false
        checksum_algorithm: sha256
      register: requirements_stat_result

    - set_fact:
        requirements_hash: "{{ requirements_stat_result.stat.checksum[0:9] }}"

    - name: Create Django docker image (should be everytime requirements change)
      docker_image:
        name: pf_tracker_django
        dockerfile: "{{ molecule_scenario_directory }}/DjangoDockerfile"
        path: ../../
        tag: "{{ requirements_hash }}"

    - name: Start postgresql
      docker_container:
        name: pf_tracker_postgresql
        image: postgres:9.3
        exposed_ports:
          - 5432
        published_ports:
          - 5432
        state: started
        env:
          POSTGRES_PASSWORD: trackerpassword
          POSTGRES_USER: tracker
          POSTGRES_DB: trackerdb
        user: postgres
      register: pg_container_results

    - name: If grsec, add paxflags cmd to node
      set_fact:
        node_grsec_image: "node_grsec"
      when: ansible_kernel.endswith('grsec')

    - name: Build node image with pax flags
      docker_image:
        name: "node_grsec:{{ node_tag }}"
        dockerfile: "{{ molecule_scenario_directory }}/NodeDockerfile"
        path: ../../
        tag: "{{ node_tag }}"
      when: ansible_kernel.endswith('grsec')

    - name: Start node
      docker_container:
        name: pf_tracker_node
        image: "{{ node_grsec_image|default('node') }}:{{ node_tag }}"
        volumes:
          - ../../:/var/www/django
        state: started
        working_dir: /var/www/django
        command: /bin/ash -c "npm install; npm run start"
        user: node
        recreate: yes

    - name: Establish postgres port
      set_fact:
        pg_port: "{{ lookup('pipe', 'docker port pf_tracker_postgresql 5432').split(':')[1] }}"

    - name: Start Django server
      docker_container:
        name: pf_tracker_django
        image: "pf_tracker_django:{{ requirements_hash }}"
        volumes:
          - ../../:/var/www/django
        state: started
        exposed_ports:
          - 8000
        published_ports:
          - 8000
        working_dir: /var/www/django
        command: |
          /bin/bash -c "./manage.py migrate; ./manage.py runserver 0.0.0.0:8000"
        user: gcorn
        env:
          DJANGO_DB_PASSWORD: trackerpassword
          DJANGO_DB_USER: tracker
          DJANGO_DB_NAME: trackerdb
          DJANGO_DB_PORT: 5432
          DJANGO_DB_HOST: "{{ pg_container_results.ansible_facts.docker_container.NetworkSettings.IPAddress }}"
        recreate: yes

    - name: Establish www port
      set_fact:
        www_port: "{{ lookup('pipe', 'docker port pf_tracker_django 8000').split(':')[1] }}"

    - name: Wait for Django runserver to come up
      uri:
        url: "http://localhost:{{ www_port }}"
        method: GET
        status_code: 200
      register: uri_scrape_result
      until: uri_scrape_result.status == 200
      retries: 5
      delay: 20

    - debug:
        msg: |
          Webserver accessible at http://localhost:{{ www_port }}.
          Postgres accessible at localhost:{{ pg_port }}
